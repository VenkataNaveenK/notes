{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p> <p>Material for Mkdocs reference link</p>"},{"location":"#why-this-notes","title":"Why this notes?","text":"<p>This is my notes used to easily fetch required data from my notes. As this is my notes, I am able to connect easily to the concepts which I have written here.</p> <ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"#welcome-to-mkdocs_1","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout_1","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"about/","title":"Welcome to About","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"about/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"about/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"python%20copy%208/","title":"Welcome to Python notes","text":""},{"location":"python%20copy%208/#virtual-environment","title":"Virtual environment","text":""},{"location":"python%20copy%208/#virtualenv","title":"Virtualenv","text":""},{"location":"python%20copy%208/#anaconda","title":"Anaconda","text":"<p>Create a virtual environment using a .yaml/.yml file <pre><code>conda env create -f &lt;filename.yml&gt;\n</code></pre> Sample environment.yml file:</p>"},{"location":"python%20copy/","title":"Welcome to Python notes","text":""},{"location":"python%20copy/#virtual-environment","title":"Virtual environment","text":""},{"location":"python%20copy/#virtualenv","title":"Virtualenv","text":""},{"location":"python%20copy/#anaconda","title":"Anaconda","text":"<p>Create a virtual environment using a .yaml/.yml file <pre><code>conda env create -f &lt;filename.yml&gt;\n</code></pre> Sample environment.yml file:</p>"},{"location":"python/","title":"Welcome to Python notes","text":""},{"location":"python/#virtual-environment","title":"Virtual environment","text":""},{"location":"python/#virtualenv","title":"Virtualenv","text":""},{"location":"python/#anaconda","title":"Anaconda","text":"<p>Create a virtual environment using a .yaml/.yml file <pre><code>conda env create -f &lt;filename.yml&gt;\n</code></pre> Sample environment.yml file:</p>"},{"location":"frontend/flask/","title":"Flask","text":""},{"location":"frontend/streamlit/","title":"Streamlit","text":""},{"location":"frontend/streamlit/#installation","title":"Installation","text":"<pre><code>pip install streamlit\n</code></pre>"},{"location":"frontend/streamlit/#streamlit-run","title":"Streamlit run","text":"<pre><code>streamlit run your_script.py [-- script args]\n</code></pre>"},{"location":"frontend/streamlit/#option-menu","title":"option-menu","text":"<pre><code>import streamlit as st\nfrom streamlit_option_menu import option_menu\n\nst.set_page_config(\n    page_title=\"Ex-stream-ly Cool App\",\n    page_icon=\"\ud83e\uddca\",\n    layout=\"wide\",\n    initial_sidebar_state=\"expanded\"\n)\n\nwith st.sidebar:\n    selected = option_menu(\"Main Menu\", [\"Home\", 'Settings'], \n        icons=['house', 'gear'], menu_icon=\"cast\", default_index=1)\n    selected\n</code></pre>"},{"location":"frontend/streamlit/#streamlit-reference","title":"Streamlit reference","text":"<p>https://docs.streamlit.io/library/api-reference</p>"},{"location":"linux/basics/common_used_commands/","title":"Common used commands","text":""},{"location":"linux/basics/common_used_commands/#pwd","title":"pwd","text":"<p>The pwd command is used to display the location of the current working directory. <pre><code>pwd\n</code></pre></p>"},{"location":"linux/basics/common_used_commands/#mkdir","title":"mkdir","text":"<p>The mkdir command is used to create a new directory under any directory.. <pre><code>mkdir &lt;directory name&gt;  \n</code></pre></p>"},{"location":"linux/basics/common_used_commands/#rmdir","title":"rmdir","text":"<p>The rmdir command is used to delete a directory. <pre><code>rmdir &lt;directory name&gt;\n</code></pre></p>"},{"location":"linux/basics/common_used_commands/#ls","title":"ls","text":"<p>The ls command is used to display a list of content of a directory. <pre><code>ls\n</code></pre></p>"},{"location":"linux/basics/common_used_commands/#cd","title":"cd","text":"<p>The cd command is used to change the current directory. <pre><code>cd &lt;directory name&gt;\n</code></pre></p>"},{"location":"linux/basics/common_used_commands/#touch","title":"touch","text":"<p>The touch command is used to create empty files. We can create multiple empty files by executing it once. <pre><code>touch &lt;file name&gt;  \ntouch &lt;file1&gt;  &lt;file2&gt; ....  \n</code></pre></p>"},{"location":"linux/basics/common_used_commands/#cat","title":"cat","text":"<p>The cat command is a multi-purpose utility in the Linux system. It can be used to create a file, display content of the file, copy the content of one file to another file, and more. <pre><code>cat [OPTION]... [FILE]..  \n</code></pre> To create a file, execute it as follows: <pre><code>cat &gt; &lt;file name&gt;  \n// Enter file content  \n</code></pre> Press \"CTRL+ D\" keys to save the file. To display the content of the file, execute it as follows: <pre><code>cat &lt;file name&gt;   \n</code></pre></p>"},{"location":"linux/basics/common_used_commands/#rm","title":"rm","text":"<p>The rm command is used to remove a file. <pre><code>rm &lt;file name&gt;\n</code></pre></p>"},{"location":"linux/basics/common_used_commands/#cp","title":"cp","text":"<p>The cp command is used to copy a file or directory. To copy in the same directory:<pre><code>cp &lt;existing file name&gt; &lt;new file name&gt;\n</code></pre></p>"},{"location":"linux/basics/common_used_commands/#mv","title":"mv","text":"<p>The mv command is used to move a file or a directory form one location to another location. <pre><code>mv &lt;file name&gt; &lt;directory path&gt; \n</code></pre></p>"},{"location":"linux/basics/common_used_commands/#rename","title":"rename","text":"<p>The rename command is used to rename files. It is useful for renaming a large group of files. <pre><code>rename 's/old-name/new-name/' files  \n</code></pre> For example, to convert all the text files into pdf files, execute the below command: <pre><code>rename 's/\\.txt$/\\.pdf/' *.txt  \n</code></pre></p>"},{"location":"linux/basics/common_used_commands/#head","title":"head","text":"<p>The head command is used to display the content of a file. It displays the first 10 lines of a file. <pre><code>head &lt;file name&gt;  \n</code></pre></p>"},{"location":"linux/basics/common_used_commands/#tail","title":"tail","text":"<p>The tail command is similar to the head command. The difference between both commands is that it displays the last ten lines of the file content. It is useful for reading the error message. <pre><code>tail &lt;file name&gt;\n</code></pre></p>"},{"location":"linux/basics/common_used_commands/#tac","title":"tac","text":"<p>The tac command is the reverse of cat command, as its name specified. It displays the file content in reverse order (from the last line). <pre><code>tac &lt;file name&gt;  \n</code></pre></p>"},{"location":"linux/basics/common_used_commands/#more","title":"more","text":"<p>The more command is quite similar to the cat command, as it is used to display the file content in the same way that the cat command does. The only difference between both commands is that, in case of larger files, the more command displays screenful output at a time.</p> <p>In more command, the following keys are used to scroll the page:</p> <p>ENTER key: To scroll down page by line.</p> <p>Space bar: To move to the next page.</p> <p>b key: To move to the previous page.</p> <p>/ key: To search the string. <pre><code>more &lt;file name&gt;\n</code></pre></p>"},{"location":"linux/basics/common_used_commands/#cat_1","title":"cat","text":"<p>The cat command is also used as a filter. To filter a file, it is used inside pipes. <pre><code>cat &lt;fileName&gt; | cat or tac | cat or tac |. . .   \n</code></pre></p>"},{"location":"linux/basics/common_used_commands/#grep","title":"grep","text":"<p>The grep is the most powerful and used filter in a Linux system. The 'grep' stands for \"global regular expression print.\" It is useful for searching the content from a file. Generally, it is used with the pipe. <pre><code>command | grep &lt;searchWord&gt; \n</code></pre></p>"},{"location":"linux/basics/common_used_commands/#wc","title":"wc","text":"<p>The wc command is used to count the lines, words, and characters in a file. <pre><code>wc &lt;file name&gt;\n</code></pre></p>"},{"location":"linux/basics/common_used_commands/#sort","title":"sort","text":"<p>The sort command is used to sort files in alphabetical order. <pre><code>sort &lt;file name&gt;  \n</code></pre></p>"},{"location":"linux/basics/common_used_commands/#gzip","title":"gzip","text":"<p>The gzip command is used to truncate the file size. It is a compressing tool. It replaces the original file by the compressed file having '.gz' extension. <pre><code>gzip &lt;file1&gt; &lt;file2&gt; &lt;file3&gt;...  \n</code></pre></p>"},{"location":"linux/basics/common_used_commands/#gunzip","title":"gunzip","text":"<p>The gunzip command is used to decompress a file. It is a reverse operation of gzip command. <pre><code>gunzip &lt;file1&gt; &lt;file2&gt; &lt;file3&gt;. .  \n</code></pre></p>"},{"location":"linux/basics/utility_commands/","title":"Utility commands","text":""},{"location":"linux/basics/utility_commands/#find","title":"find","text":"<p>The find command is used to find a particular file within a directory. It also supports various options to find a file such as byname, by type, by date, and more.</p> <p>The following symbols are used after the find command:</p> <p>(.) : For current directory name</p> <p>(/) : For root <pre><code>find . -name \"*.pdf\"  \n</code></pre></p>"},{"location":"linux/basics/utility_commands/#locate","title":"locate","text":"<p>The locate command is used to search a file by file name. It is quite similar to find command; the difference is that it is a background process. It searches the file in the database, whereas the find command searches in the file system. It is faster than the find command. To find the file with the locates command, keep your database updated. <pre><code>locate &lt;file name&gt;  \n</code></pre></p>"},{"location":"linux/basics/utility_commands/#date","title":"date","text":"<p>The date command is used to display date, time, time zone, and more. <pre><code>date  \n</code></pre></p>"},{"location":"linux/basics/utility_commands/#cal","title":"cal","text":"<p>The cal command is used to display the current month's calendar with the current date highlighted. <pre><code>cal&lt;\n</code></pre></p>"},{"location":"linux/basics/utility_commands/#sleep","title":"sleep","text":"<p>The sleep command is used to hold the terminal by the specified amount of time. By default, it takes time in seconds. <pre><code>sleep &lt;time&gt;\n</code></pre></p>"},{"location":"linux/basics/utility_commands/#time","title":"time","text":"<p>The time command is used to display the time to execute a command. <pre><code>time\n</code></pre></p>"},{"location":"linux/basics/utility_commands/#df","title":"df","text":"<p>The df command is used to display the disk space used in the file system. It displays the output as in the number of used blocks, available blocks, and the mounted directory. <pre><code>df\n</code></pre></p>"},{"location":"linux/basics/utility_commands/#exit","title":"exit","text":"<p>Linux exit command is used to exit from the current shell. It takes a parameter as a number and exits the shell with a return of status number. <pre><code>exit\n</code></pre></p>"},{"location":"linux/basics/utility_commands/#clear","title":"clear","text":"<p>Linux clear command is used to clear the terminal screen. <pre><code>clear\n</code></pre></p>"},{"location":"linux/editors/nano_editor/","title":"Nano editor","text":"<p>Nano is a straight forward editor. It is designed for both beginners and advanced users. It has many customization features.</p>"},{"location":"linux/editors/nano_editor/#advanced-features","title":"Advanced features","text":"<p>Some advanced features of a nano text editor are as following:</p> <ul> <li>It has highly customizable key bindings</li> <li>It supports syntax highlighting</li> <li>It has undo and redo options</li> <li>It provides full line display on the standard output</li> <li>It has pager support to read from standard input</li> </ul> <p>To open file with nano editor, execute the command as follows: <pre><code>nano &lt;file name&gt;  \n</code></pre> In the nano editor, the useful options are given at the bottom, use the CTRL+ option to perform an operation. For example, to exit from the editor, use CTRL +X keys. </p>"},{"location":"linux/editors/vim_editor/","title":"vi/vim editor","text":"<p>The vi editor is elaborated as visual editor. It is installed in every Unix system. In other words, it is available in all Linux distros. It is user-friendly and works same on different distros and platforms. It is a very powerful application. An improved version of vi editor is vim.</p>"},{"location":"linux/editors/vim_editor/#installation","title":"Installation","text":"<pre><code>sudo apt update\nsudo apt install vim -y\nvim --version\n</code></pre>"},{"location":"linux/editors/vim_editor/#vi-editor-modes","title":"vi editor modes","text":"<p>The vi editor has two modes:</p> <ul> <li> <p>Command Mode: In command mode, actions are taken on the file. The vi editor starts in command mode. Here, the typed words will act as commands in vi editor. To pass a command, you need to be in command mode.</p> </li> <li> <p>Insert Mode: In insert mode, entered text will be inserted into the file. The Esc key will take you to the command mode from insert mode.</p> </li> </ul> <p>By default, the vi editor starts in command mode. To enter text, you have to be in insert mode, just type 'i' and you'll be in insert mode. Although, after typing 'i' nothing will appear on the screen but you'll be in insert mode. Now you can type anything.</p> <p>To exit from insert mode press Esc key, you'll be directed to command mode.</p> <pre><code>vi ./file.txt\n</code></pre>"},{"location":"linux/editors/vim_editor/#commands-to-save-and-quit","title":"Commands to save and quit:","text":"Commands Action :wq Save and quit :w Save :q Quit :w fname Save as fname ZZ Save and quit :q! Quit discarding changes made :w! Save (and write to non-writable file)"},{"location":"linux/editors/vim_editor/#commands-to-cut-copy-and-paste","title":"Commands to cut, copy and paste:","text":"Commands Action dd Delete a line yy (yank yank) copy a line p Paste after the current line P Paste before the current line"},{"location":"mlops/aws/","title":"AWS","text":""},{"location":"mlops/azure/","title":"Azure","text":""},{"location":"mlops/docker/","title":"Docker","text":""},{"location":"mlops/dvc/","title":"DVC(Data Version Control)","text":""},{"location":"mlops/gcp/","title":"GCP","text":""},{"location":"mlops/git/","title":"Git Commands","text":""},{"location":"mlops/git/#day-to-day-commands","title":"day-to-day commands","text":"Command Description git clone repo_url Clone public repository git clone ssh://git@github.com/[username]/[repository-name].git Clone private repository git checkout [branch name] Switch to a branch git pull Update local repository to the newest commit git status Check status git add [file-name] Add a file to the staging area git add -A Add all new and changed files to the staging area git commit -m \"[commit message]\" Commit changes git revert commitid Revert commit changes git log View changes git log --summary View changes (detailed) git log --oneline View changes (briefly) git diff [source branch] [target branch] Preview changes before merging git push -u origin [branch name] Push changes to remote repository (and remember the branch) git push Push changes to remote repository (remembered branch)"},{"location":"mlops/git/#global-config","title":"global config","text":"Command Description git config --global user.name \"your_username\" Set globally Username git config --global user.email \"your_email_address@example.com\" Set globally Email id git config --global --list Get global config git remote add origin ssh://git@github.com/[username]/[repository-name].git Add a remote repository git remote set-url origin ssh://git@github.com/[username]/[repository-name].git Set a repository's origin branch to SSH"},{"location":"mlops/git/#others","title":"Others","text":"Command Description git init Initialize a local Git repository git rm -r [file-name.txt] Remove a file (or folder) git branch List of branches (the asterisk denotes the current branch) git branch -a List all branches (local and remote) git branch [branch name] Create a new branch git branch -d [branch name] Delete a branch git branch -D [branch name] Delete a branch forcefully git push origin --delete [branch name] Delete a remote branch git checkout -b [branch name] Create a new branch and switch to it git checkout -b [branch name] origin/[branch name] Clone a remote branch and switch to it git branch -m [old branch name] [new branch name] Clone a remote branch and switch to it git branch -m [old branch name] [new branch name] Rename a local branch git checkout - Switch to the branch last checked out git checkout -- [file-name.txt] Discard changes to a file git merge [branch name] Merge a branch into the active branch git merge [source branch] [target branch] Merge a branch into a target branch git stash Stash changes in a dirty working directory git stash clear Remove all stashed entries git push origin [branch name] Push a branch to your remote repository git pull origin [branch name] Pull changes from remote repository"},{"location":"mlops/github_actions/","title":"Github Actions","text":""},{"location":"mlops/kubernetes/","title":"Kubernetes","text":""},{"location":"mlops/yaml/","title":"YAML","text":""},{"location":"mlops/yaml/#what-is-yaml","title":"What is YAML?","text":"<ul> <li>YAML(YAML Ain't Markup Language) is a human-readable data serialization format.</li> <li>It is commonly used for configuration files and data exchange between systems.</li> <li>YAML is desinged to be easy to read and write, making it popular amoung developers and system administrators.</li> </ul>"},{"location":"mlops/yaml/#syntax","title":"Syntax","text":"<p>YAML used indentation and colons to structure data. Here's an example of YAML system: <pre><code>key: value\nnested_key:\n  - item1\n  - item2\n</code></pre> * YAML uses indentation to indicate the nesting of elements. * Spaces are recommended over tabs, and number of spaces for indentation conventionally, two spaces are used for indentation.</p>"},{"location":"mlops/yaml/#comments","title":"Comments","text":"<p>Comments in YAML start with # character and are used to provide explainatory or descriptive text. * Comments are ignored by the YAML parser. <pre><code># This is a comment\nkey: value  # This is another comment\n</code></pre></p>"},{"location":"mlops/yaml/#datasturctures","title":"DataSturctures","text":""},{"location":"mlops/yaml/#scalars","title":"Scalars","text":"<ul> <li>Scalar represent simple values like strings, numbers, booleans and null.</li> <li>Scalar don't have any indentation and can be expressed directly. <pre><code>string_key: Hello, world!\nnumber_key: 42\nboolean_key: true\nnull_key: null\n</code></pre></li> </ul>"},{"location":"mlops/yaml/#lists","title":"Lists","text":"<ul> <li>Lists are represented by using a hyphen(-) followed by a space.</li> <li>Lists can contain any combination of scalars, other lists, or mappings(key-value pairs)</li> <li>If one key has multiple values, then lists are used. <pre><code>list_key:\n  - item1\n  - item2\n  - sub_list:\n    - sub_item1\n    - sub_item2\n</code></pre></li> </ul>"},{"location":"mlops/yaml/#mappings","title":"Mappings","text":"<ul> <li>Mappings represent key-value pairs and use a colon(:) to separate the key from the value.</li> <li>Mappings can be nested with each other. <pre><code>person:\n  name: John Doe\n  age: 30\n</code></pre></li> </ul>"},{"location":"mlops/yaml/#multiline-scalars","title":"Multiline Scalars","text":"<p>If a scalar value spans multiple lines, you can use the |(pipe) character to indicate a literal block scalar or &gt; character to indicate a folded scalar. <pre><code>multiline_key: |\n  This is a \n  multiline\n  scalar value\n</code></pre></p>"},{"location":"mlops/yaml/#yaml-validator","title":"YAML validator","text":"<p>YAML Lint website is used to validate the YAML syntax.</p> <p>www.yamllint.com</p>"},{"location":"mlops/yaml/#-triple-dash","title":"--- (Triple dash)","text":"<p>If there are multiple YAML data in a single file, --- represents the beginning of YAML.</p>"},{"location":"mlops/yaml/#example","title":"Example","text":"<pre><code>--- # Beginning of YAML\n#Scalars\nname: Naveen\nlocation: Bengaluru\nprofession: IT\n#Lists\nhobbies:\n  - Reading\n  - Coding\n  - Exploring Tech\n#Mappings\nfavoriteFoods:\n  fruits: apple\n  drinks: Orange juice\n#MultilineScalars\nwhatIsThisVideoAbout: |\n  this video discuss about\n  YAML syntax in detail\n</code></pre>"},{"location":"python/exception_handling/","title":"Python Exception Handling","text":"<p>Error in Python can be of two types i.e. Syntax errors and Exceptions.</p> <p>Errors are problems in a program due to which the program will stop the execution. On the other hand, exceptions are raised when some internal events occur which change the normal flow of the program.</p>"},{"location":"python/exception_handling/#different-types-of-exceptions-in-python","title":"Different types of exceptions in python","text":"<ul> <li>SyntaxError: This exception is raised when the interpreter encounters a syntax error in the code, such as a misspelled keyword, a missing colon, or an unbalanced parenthesis.</li> <li>TypeError: This exception is raised when an operation or function is applied to an object of the wrong type, such as adding a string to an integer.</li> <li>NameError: This exception is raised when a variable or function name is not found in the current scope.</li> <li>IndexError: This exception is raised when an index is out of range for a list, tuple, or other sequence types.</li> <li>KeyError: This exception is raised when a key is not found in a dictionary.</li> <li>ValueError: This exception is raised when a function or method is called with an invalid argument or input, such as trying to convert a string to an integer when the string does not represent a valid integer.</li> <li>AttributeError: This exception is raised when an attribute or method is not found on an object, such as trying to access a non-existent attribute of a class instance.</li> <li>IOError: This exception is raised when an I/O operation, such as reading or writing a file, fails due to an input/output error.</li> <li>ZeroDivisionError: This exception is raised when an attempt is made to divide a number by zero.</li> <li>ImportError: This exception is raised when an import statement fails to find or load a module.</li> </ul>"},{"location":"python/exception_handling/#exception-syntax","title":"Exception syntax","text":"<pre><code>try:\n    # Some Code.... \n\nexcept:\n    # optional block\n    # Handling of exception (if required)\n\nelse:\n    # execute if no exception\n\nfinally:\n    # Some code .....(always executed)\n</code></pre>"},{"location":"python/exception_handling/#raising-exception","title":"Raising Exception","text":"<p><pre><code>try: \n    raise NameError(\"Hi there\")\nexcept NameError:\n    print (\"An exception\")\n    raise\n</code></pre> output<pre><code>Traceback (most recent call last):\n  File \"/home/d6ec14ca595b97bff8d8034bbf212a9f.py\", line 5, in &lt;module&gt;\n    raise NameError(\"Hi there\")  # Raise Error\nNameError: Hi there\n</code></pre></p>"},{"location":"python/exception_handling/#advantages","title":"Advantages","text":"<ul> <li>Improved program reliability: By handling exceptions properly, you can prevent your program from crashing or producing incorrect results due to unexpected errors or input.</li> <li>Simplified error handling: Exception handling allows you to separate error handling code from the main program logic, making it easier to read and maintain your code.</li> <li>Cleaner code: With exception handling, you can avoid using complex conditional statements to check for errors, leading to cleaner and more readable code.</li> <li>Easier debugging: When an exception is raised, the Python interpreter prints a traceback that shows the exact location where the exception occurred, making it easier to debug your code.</li> </ul>"},{"location":"python/exception_handling/#disadvantages","title":"Disadvantages","text":"<ul> <li>Performance overhead: Exception handling can be slower than using conditional statements to check for errors, as the interpreter has to perform additional work to catch and handle the exception.</li> <li>Increased code complexity: Exception handling can make your code more complex, especially if you have to handle multiple types of exceptions or implement complex error handling logic.</li> <li>Possible security risks: Improperly handled exceptions can potentially reveal sensitive information or create security vulnerabilities in your code, so it\u2019s important to handle exceptions carefully and avoid exposing too much information about your program.</li> </ul>"},{"location":"python/logging/","title":"The Logging module","text":"<p>The logging module in Python is a ready-to-use and powerful module that is designed to meet the needs of beginners as well as enterprise teams. It is used by most of the third-party Python libraries, so you can integrate your log messages with the ones from those libraries to produce a homogeneous log for your application.</p> <p>Adding logging to your Python program is as easy as this: <pre><code>import logging\n</code></pre></p>"},{"location":"python/logging/#levels","title":"Levels","text":"<p>With the logging module imported, you can use something called a \u201clogger\u201d to log messages that you want to see. By default, there are 5 standard levels indicating the severity of events. Each has a corresponding function that can be used to log events at that level of severity. </p> <p>The defined levels, in order of increasing severity, are the following:</p> <ul> <li>DEBUG</li> <li>INFO</li> <li>WARNING</li> <li>ERROR</li> <li>CRITICAL</li> </ul> <p><pre><code>import logging\n\nlogging.debug('This is a debug message')\nlogging.info('This is an info message')\nlogging.warning('This is a warning message')\nlogging.error('This is an error message')\nlogging.critical('This is a critical message')\n</code></pre> output: <pre><code>WARNING:root:This is a warning message\nERROR:root:This is an error message\nCRITICAL:root:This is a critical message\n</code></pre> Notice that the debug() and info() messages didn\u2019t get logged. This is because, by default, the logging module logs the messages with a severity level of WARNING or above. You can change that by configuring the logging module to log events of all levels if you want. You can also define your own severity levels by changing configurations, but it is generally not recommended as it can cause confusion with logs of some third-party libraries that you might be using.</p>"},{"location":"python/logging/#basic-configurations","title":"Basic Configurations","text":"<p>You can use the basicConfig(**kwargs) function to configure the logging. Some of the commonly used parameters for basicConfig() are the following:</p> <ul> <li>level: The root logger will be set to the specified severity level.</li> <li>filename: This specifies the file.</li> <li>filemode: If filename is given, the file is opened in this mode. The default is a, which means append.</li> <li>format: This is the format of the log message.</li> </ul> <p>By using the level parameter, you can set what level of log messages you want to record. This can be done by passing one of the constants available in the class, and this would enable all logging calls at or above that level to be logged. Here\u2019s an example: <pre><code>import logging\n\nlogging.basicConfig(level=logging.DEBUG)\nlogging.debug('This will get logged')\n</code></pre> output<pre><code>DEBUG:root:This will get logged\n</code></pre> All events at or above DEBUG level will now get logged.</p> <p>Similarly, for logging to a file rather than the console, filename and filemode can be used, and you can decide the format of the message using format. The following example shows the usage of all three: <pre><code>import logging\n\nlogging.basicConfig(filename='app.log', filemode='w', format='%(name)s - %(levelname)s - %(message)s')\nlogging.warning('This will get logged to a file')\n</code></pre> output<pre><code>root - ERROR - This will get logged to a file\n</code></pre> The message will look like this but will be written to a file named app.log instead of the console. The filemode is set to w, which means the log file is opened in \u201cwrite mode\u201d each time basicConfig() is called, and each run of the program will rewrite the file. The default configuration for filemode is a, which is append.</p>"},{"location":"python/logging/#formatting-the-output","title":"Formatting the Output","text":""},{"location":"python/logging/#showing-process-id-and-levelname","title":"Showing process id and levelname","text":"<p><pre><code>import logging\n\nlogging.basicConfig(format='%(process)d-%(levelname)s-%(message)s')\nlogging.warning('This is a Warning')\n</code></pre> output<pre><code>18472-WARNING-This is a Warning\n</code></pre></p>"},{"location":"python/logging/#showing-asctime-and-message","title":"Showing asctime and message","text":"<p><pre><code>import logging\n\nlogging.basicConfig(format='%(asctime)s - %(message)s', level=logging.INFO)\nlogging.info('Admin logged in')\n</code></pre> output<pre><code>2018-07-11 20:12:06,288 - Admin logged in\n</code></pre></p>"},{"location":"python/logging/#formatting-asctime","title":"Formatting asctime","text":"<p><pre><code>import logging\n\nlogging.basicConfig(format='%(asctime)s - %(message)s', datefmt='%d-%b-%y %H:%M:%S')\nlogging.warning('Admin logged out')\n</code></pre> output<pre><code>12-Jul-18 20:53:19 - Admin logged out\n</code></pre></p>"},{"location":"python/logging/#logging-variable-data","title":"Logging variable data","text":"<p><pre><code>import logging\n\nname = 'John'\n\nlogging.error('%s raised an error', name)\n</code></pre> output<pre><code>ERROR:root: John raised an error\n</code></pre></p>"},{"location":"python/logging/#example","title":"Example","text":"<p><pre><code># Importing module\nimport logging\n\n# Create and configure logger\nlogging.basicConfig(\n        # filename=\"std.log\",\n        format=\"%(asctime)s %(levelname)s: %(message)s\",\n        # filemode=\"w\"\n        )\n\n# Creating an object\nlogger = logging.getLogger()\n\n# Setting the threshold of logger to DEBUG\nlogger.setLevel(logging.DEBUG)\n\n# Test messages\nlogger.debug(\"Harmless debug Message\")\nlogger.info(\"Just an information\")\nlogger.warning(\"Its a Warning\")\nlogger.error(\"Did you try to divide by zero\")\nlogger.critical(\"Internet is down\")\n</code></pre> output<pre><code>2024-02-26 16:39:14,915 DEBUG: Harmless debug Message\n2024-02-26 16:39:14,915 INFO: Just an information\n2024-02-26 16:39:14,916 WARNING: Its a Warning\n2024-02-26 16:39:14,916 ERROR: Did you try to divide by zero\n2024-02-26 16:39:14,916 CRITICAL: Internet is down\n</code></pre></p>"},{"location":"python/numpy/","title":"Numpy","text":""},{"location":"python/os_operations/","title":"OS operations","text":""},{"location":"python/os_operations/#glob-module","title":"glob module","text":"<p>The glob module, which is short for global, is a function that\u2019s used to search for files that match a specific file pattern or name. It can be used to search CSV files and for text in files. </p> <p>We can use glob to search for a specific file pattern, or perhaps more usefully, use wildcard characters to search for files where the file name matches a certain pattern.</p> <p>These patterns are similar to regular expressions but much simpler.</p> <ul> <li>Asterisk (*): Matches zero or more characters.</li> <li>Question mark (?): Matches exactly one character.</li> </ul> <p>Example: <pre><code>import glob\n\npath = 'input'\nfiles = glob.glob(path+'/*.csv')\n</code></pre></p>"},{"location":"python/os_operations/#os-module","title":"os module","text":"Method Description os.chdir(path) Change the current working directory os.getcwd() Returns the current working directory os.getenv(key, default=None) Return the value of the environment variable key as a string if it exists, or default if it doesn\u2019t. key is a string. os.listdir(path='.') Returns a list of the names of the entries in a directory os.mkdir(path, mode=0o777, *, dir_fd=None) Creates a directory (with a specified mode)"},{"location":"python/os_operations/#ospath-module","title":"os.path module","text":"Method Description os.path.basename(path) Return the base name of pathname path os.path.abspath(path) Return a normalized absolutized version of the pathname path os.path.dirname(path) Return the directory name of pathname path os.path.exists(path) Return True if path refers to an existing path or an open file descriptor os.path.getsize(path) Return the size, in bytes, of path os.path.isfile(path) Return True if path is an existing regular file os.path.isdir(path) Return True if path is an existing directory os.path.join(path, *paths) Join one or more path segments intelligently os.path.normcase(path) Normalize the case of a pathname. On Windows, convert all characters in the pathname to lowercase, and also convert forward slashes to backward slashes. On other operating systems, return the path unchanged. os.path.normpath(path) Normalize a pathname by collapsing redundant separators and up-level references so that A//B, A/B/, A/./B and A/foo/../B all become A/B. This string manipulation may change the meaning of a path that contains symbolic links. On Windows, it converts forward slashes to backward slashes. To normalize case, use normcase()."},{"location":"python/os_operations/#shutil-module","title":"shutil module","text":"Method Description shutil.copy2(src, dst, *, follow_symlinks=True) Identical to copy() except that copy2() also attempts to preserve file metadata shutil.copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2, ignore_dangling_symlinks=False, dirs_exist_ok=False) Recursively copy an entire directory tree rooted at src to a directory named dst and return the destination directory. All intermediate directories needed to contain dst will also be created by default. shutil.rmtree(path, ignore_errors=False, onerror=None, *, onexc=None, dir_fd=None) Delete an entire directory tree; path must point to a directory (but not a symbolic link to a directory) shutil.move(src, dst, copy_function=copy2) Recursively move a file or directory (src) to another location and return the destination."},{"location":"python/pandas/","title":"Pandas","text":""},{"location":"python/pytest/","title":"Pytest","text":""},{"location":"python/virtualenv/","title":"Virtual environment","text":""},{"location":"python/virtualenv/#using-virtualenv","title":"Using Virtualenv","text":"<p>Creating virtual environment using the below commands</p> <ol> <li>Installing 'virtualenv' module <pre><code>pip install virtualenv\n</code></pre></li> <li>Creating virtual environment <pre><code>virtualenv venv\n</code></pre> This command creates a <code>venv</code> folder in the current working directory.</li> <li>Activating created virtual environment <pre><code>venv\\Scripts\\activate\n</code></pre></li> </ol>"},{"location":"python/virtualenv/#running-application-with-bat","title":"Running application with .bat","text":"<ol> <li>Create a <code>env_setup.bat</code> file with the below commands <pre><code>pip install virtualenv\nvirtualenv venv\npip install -r requirements.txt\n</code></pre></li> <li>Create a <code>run.bat</code> file with the below commands <pre><code>call venv\\Scripts\\activate\n&lt;application start command&gt;\n</code></pre></li> </ol>"},{"location":"python/virtualenv/#using-anaconda","title":"Using Anaconda","text":"<p>Create a virtual environment using a .yaml/.yml file <pre><code>conda env create -f &lt;filename.yml&gt;\n</code></pre> Sample environment.yml file:</p>"}]}